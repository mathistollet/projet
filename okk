#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#define RESET   "\033[0m"
#define RED     "\033[0;31m"
#define GREEN   "\033[0;32m"
#define ORANGE  "\033[38;5;208m"

typedef enum {
    tank, assassin, soutien
} Type;

typedef struct {
    char nom[30];
    int degats;
} Attaque;

typedef struct {
    char nom[50];
    char description[100];
    float valeur;
    char propriete[20];
    char operation[10];
    int tours_actifs;
    int recharge_max;
    int recharge_restante;
} Technique;

typedef struct {
    char nom[50];
    int pvc;
    int pvm;
    float def;
    float defmax;
    float agl;
    float vitess;
    float vitessmax;
    float barre_action;
    Attaque att[2];
    Type type;
    Technique technique;
    int tours_effet_restant;
} Champion;



const char* lesroles(Type type) {
    switch (type) {
        case 0: return "tank";
        case 1: return "assassin";
        case 2: return "soutien";
        default: return "inconnu";
    }
}



void afficherBarreDeVie(int pvact, int pvmax) {
    int longueurBarre = 20;
    int nbBlocs = (pvact * longueurBarre) / pvmax;
    float ratio = (float)pvact / pvmax;

    const char *couleur;
    if (ratio > 0.6) couleur = GREEN;
    else if (ratio > 0.3) couleur = ORANGE;
    else couleur = RED;

    printf("[");
    for (int i = 0; i < longueurBarre; i++) {
        if (i < nbBlocs)
            printf("%s█", couleur);
        else
            printf("%s ", RESET);
    }
    printf("%s] %d/%d PV\n", RESET, pvact, pvmax);
}



void afficherBarreDeVitesse(float barre_action) {
    int longueurBarre = 20;
    int nbBlocs = (barre_action * longueurBarre) / 100;

    printf("[");
    for (int i = 0; i < longueurBarre; i++) {
        if (i < nbBlocs)
            printf("%s█", GREEN);
        else
            printf("%s ", RESET);
    }
    printf("] %.2f/100 Vitesse\n", barre_action);
}



void afficherVie(Champion p1, Champion p2) {
    printf("\n--- ÉTAT DES COMBATTANTS ---\n");
    printf("%s : ", p1.nom);
    afficherBarreDeVie(p1.pvc, p1.pvm);
    afficherBarreDeVitesse(p1.barre_action);

    printf("%s : ", p2.nom);
    afficherBarreDeVie(p2.pvc, p2.pvm);
    afficherBarreDeVitesse(p2.barre_action);
    printf("\n");
}


int esquive(int chance) {
    return (rand() % 101) > chance;
}


void utiliserAttaque(Champion *attaquant, Champion *cible, Attaque a) {
    if (!esquive(cible->agl)) {
        printf("\n%s esquive avec grâce !\n", cible->nom);
    } else {
        printf("%s utilise %s et inflige %d dégâts à %s !\n", attaquant->nom, a.nom, a.degats, cible->nom);
        cible->pvc -= (a.degats - cible->def);
        if (cible->pvc < 0) cible->pvc = 0;
    }
}







void utiliserTechnique(Champion *utilisateur, Champion *cible) {
    Technique *tech = &utilisateur->technique;

    if (tech->recharge_restante > 0) {
        printf("%s ne peut pas encore utiliser sa technique spéciale (%d tours restants).\n", utilisateur->nom, tech->recharge_restante);
        return;
    }

    printf("%s utilise sa technique spéciale : %s !\n", utilisateur->nom, tech->nom);
    
    
     if (strcmp(tech->propriete, "pvc") == 0 && tech->tours_actifs == 0) {
        if (strcmp(tech->operation, "add") == 0) {
            utilisateur->pvc += tech->valeur;
            if (utilisateur->pvc > utilisateur->pvm)
                utilisateur->pvc = utilisateur->pvm;
            printf("%s récupère %.0f PV !\n", utilisateur->nom, tech->valeur);
        }
        else {
        cible->pvc =cible->pvc-tech->valeur;
        
            if (cible->pvc < 0){
                    cible->pvc = 0;
            }
        printf("%s fais une grosse attaque et tape %s de  %.0f dégats !\n",utilisateur->nom, cible->nom, tech->valeur);
            
        }
    } 
    
   if (strcmp(tech->propriete, "vitess") == 0 && tech->tours_actifs > 0) {
            if (strcmp(tech->operation, "div") == 0) {
                cible->vitess -= cible->vitess/tech->valeur;  
                
                if (cible->vitess < 0){
                 cible->vitess = 0;
                 }
                cible->tours_effet_restant = tech->tours_actifs;
                printf("%s perd %.0f%% de vitesse pour %d tours !\n", cible->nom, (tech->valeur-1)*100, tech->tours_actifs);
            }
            
            
            if (strcmp(tech->operation, "mul") == 0) {
                utilisateur->vitess = tech->valeur* utilisateur->vitess;  
                utilisateur->tours_effet_restant = tech->tours_actifs;
                printf("%s gagne %.0f%% de vitesse pour %d tours !\n", utilisateur->nom, (tech->valeur-1)*100, tech->tours_actifs);
            }    
    } 
    
          
    if (strcmp(tech->propriete, "def") == 0 && tech->tours_actifs > 0) {
            if (strcmp(tech->operation, "div") == 0) {
                cible->def = cible->def/tech->valeur;  
                
                if (cible->def < 0) cible->def = 0;
                cible->tours_effet_restant = tech->tours_actifs;
                printf("%s perd %.0f de defense pour %d tours !\n", cible->nom, (tech->valeur-1)*100, tech->tours_actifs);
            }
            
            
            if (strcmp(tech->operation, "mul") == 0) {
                utilisateur->def = tech->valeur* utilisateur->def;  
                utilisateur->tours_effet_restant = tech->tours_actifs;
                printf("%s gagne %.0f% de defense pour %d tours !\n", utilisateur->nom, (tech->valeur-1)*100, tech->tours_actifs);
            }    
    } 
    
    
    
    
    
    

    tech->recharge_restante = tech->recharge_max;
}

void soigner(Champion* c) {
    int soin = 30;
    c->pvc += soin;
    if (c->pvc > c->pvm) c->pvc = c->pvm;
    printf("%s se soigne et récupère %d PV !\n", c->nom, soin);
}

void combat(Champion* perso1, Champion* perso2) {
    int choix;
    printf("== Tour de %s ==\n", perso1->nom);

    for (int i = 0; i < 2; i++) {
        printf("%d - %s (dégâts : %d)\n", i + 1, perso1->att[i].nom, perso1->att[i].degats);
    }
    if (perso1->type == soutien) printf("3 - Se soigner\n");
    if (perso1->technique.recharge_restante == 0) printf("4 - Technique spéciale : %s (%s)\n", perso1->technique.nom,perso1->technique.description);

    printf("Choisis une action : ");
    scanf("%d", &choix);

    if (choix >= 1 && choix <= 2) {
        utiliserAttaque(perso1, perso2, perso1->att[choix - 1]);
    } 
    
    else if (choix == 3 && perso1->type == soutien) {
        soigner(perso1);
    } 
    
    else if (choix == 4 && perso1->technique.recharge_restante == 0) {
        utiliserTechnique(perso1, perso2);
    } 
    
    else {
        printf("Choix invalide, tour perdu !\n");
    }

    // Gestion des effets et recharges
    
    
 
    if (perso1->tours_effet_restant > 0) {
    perso1->tours_effet_restant--;
    }
    if (perso1->tours_effet_restant == 0) {
        // Rétablir la vitesse après la fin de l'effet
            if (perso1->vitess != perso1->vitessmax){
                perso1->vitess = perso1->vitessmax;
                printf("L'effet de vitesse sur %s est terminé, vitesse rétablie.\n", perso1->nom);
            
        }
        if (perso1->def != perso1->defmax){
                perso1->def = perso1->defmax;
                printf("L'effet de defense sur %s est terminé, defense rétablie.\n", perso1->nom);
            
    }
    
    }
    
    
    
    
    if (perso2->tours_effet_restant > 0) perso2->tours_effet_restant--;
    if (perso1->technique.recharge_restante > 0) perso1->technique.recharge_restante--;
    
}

int main() {
    srand(time(NULL));

    Champion a = {"titeuf", 350, 350, 10,10, 20, 15,15, 0,
        {{"Coup de poing", 50}, {"Lame magique", 25}},
        tank,
        {"Rage berserk", "grosse frappe de 40 degats.", 40.0, "pvc", "sous", 0, 3, 0},
        0
    };

    Champion b = {"manu", 300, 300, 10,10, 20, 10,10, 0,
        {{"lunette", 50}, {"boucle", 30}},
        soutien,
        {"glassement", "ralentit l'adversaire pendant 3 tour .", 2, "vitess", "div", 3, 3, 0},
        0
    };

    while (a.pvc > 0 && b.pvc > 0) {
        a.barre_action += a.vitess;
        printf("barre d'action %f\n",a.barre_action );
        b.barre_action += b.vitess;

        if (a.barre_action >= 100 && a.pvc > 0) {
            a.barre_action = 100;
            afficherVie(a, b);
            combat(&a, &b);
            a.barre_action = 0;
        }
        if (b.barre_action >= 100 && b.pvc > 0) {
            b.barre_action = 100;
            afficherVie(a, b);
            combat(&b, &a);
            b.barre_action = 0;
        }
    }

    afficherVie(a, b);
    if (a.pvc > 0) printf("%s a gagné !\n", a.nom);
    
    else if (b.pvc > 0) printf("%s a gagné !\n", b.nom);
    
    else printf("Match nul !\n");

    return 0;
}
    
