
#include"projet.h"




void combat3v3(Champion* tousLesChampions, int nbChampions,Champion* equipe1,Champion* equipe2,char* nomEquipe1,char* nomEquipe2) {


    printf("\n--- ");
    printCouleur(nomEquipe1, "\033[0;34m");
    printf("  ---\n");
    for (int i = 0; i < 3; i++){
        afficherChampion(&equipe1[i], i + 1);
    }
    printf("\n--- ");
    printCouleur(nomEquipe2, "\033[0;31m");
    printf(" ---\n");
    for (int i = 0; i < 3; i++){
        afficherChampion(&equipe2[i], i + 1);
    }
    printf("\n");
    printf("\n");
    debutc();
    sleep(2);
    printf("\n");
    printf("\n");


    int equipe1vivants=3;
    int equipe2vivants=3;
    Champion* cible;

    while(equipe1vivants>0&&equipe2vivants>0){
        for(int i=0;i<3;i++){
            equipe1[i].barre_action+=equipe1[i].vitess;
            equipe2[i].barre_action+=equipe2[i].vitess;
        }
        for(int j=0;j<3;j++){
            if(equipe1[j].barre_action>=100 && equipe1[j].pvc>0){
                equipe1[j].barre_action=100;



                printf("== Tour de %s ==\n", equipe1[j].nom);
                if(j==0){
                    rayman();
                }
                else if(j==1){
                    boo();
                }
                else if(j==2){
                    groot();
                }
                sleep(2);

                cible=selectionnerCible(&equipe2[0],&equipe2[1],&equipe2[2], &equipe1[j]);
                equipe1[j].barre_action=0;


                printf("---ETAT DES COMBATTANTS---\n");
                printf("equipe ");
                printCouleur(nomEquipe1, "\033[0;34m");
                printf("\n");
                for(int k=0;k<3;k++){
                    afficherVie(equipe1[k]);

                }
                printf("\n");
                vs();
                printf("\n");
                printf("equipe ");
                printCouleur(nomEquipe2, "\033[0;31m");
                printf("\n ");
                for(int k=0;k<3;k++){
                    afficherVie(equipe2[k]);

                }
                printf("\n");
                printf("appuyez sur une touche puis entrer pour continuer le combat\n");
                vider();
                getchar();

            }
            if(equipe2[j].barre_action>=100 && equipe2[j].pvc>0){
                equipe2[j].barre_action=100;
                printf("== Tour de %s ==\n", equipe2[j].nom);

                if(j==0){
                    yoda();
                }
                else if(j==1){
                    yoshi();
                }
                else{
                    toad();
                }
                sleep(2);

                cible=selectionnerCible(&equipe1[0],&equipe1[1],&equipe1[2],&equipe2[j]);
                equipe2[j].barre_action=0;

                printf("---ETAT DES COMBATTANTS---\n");
                printf("equipe ");
                printCouleur(nomEquipe1, "\033[0;34m");
                printf("\n");

                for(int k=0;k<3;k++){
                    afficherVie(equipe1[k]);

                }
                printf("\n");
                vs();
                printf("\n");
                printf("equipe ");
                printCouleur(nomEquipe2, "\033[0;31m");
                printf("\n ");
                for(int k=0;k<3;k++){
                    afficherVie(equipe2[k]);

                }
                printf("\n");
                printf("appuyer sur entrer pour passer...\n");

                vider();
                getchar();


                equipe1vivants=0;
                equipe2vivants=0;

                for (int i = 0; i < 3; i++) {
                    if (equipe1[i].pvc > 0){
                        equipe1vivants++;
                    }
                    if (equipe2[i].pvc > 0){
                        equipe2vivants++;
                    }

                }

            }
        }

        if (equipe1vivants == 0) {
            printf("Après une bataille épique,l'équipe ");
            printCouleur(nomEquipe1, "\033[0;34m");
            printf("remporte la victoire !\n");
        }
        else if (equipe2vivants == 0) {
            printf("Après une bataille épique,l'équipe ");
            printCouleur(nomEquipe2, "\033[0;31m");
            printf("remporte la victoire !\n");
        }


    }

}











void combat(Champion* perso1, Champion* perso2) {
    afficherVie(*perso2);
    printf("\n");
    int choix;
    printf("\n");

    for (int i = 0; i < 2; i++) {
        printf("%d - %s (dégâts : %d)\n", i + 1, perso1->att[i].nom, perso1->att[i].degats);
    }
    if (perso1->type == soutien){
        printf("3 - Se soigner\n");

        if (perso1->technique.recharge_restante == 0){
            printf("4 - Technique spéciale : %s (%s)\n", perso1->technique.nom,perso1->technique.description);
        }
        printf("\n");
        printf("Choisis une action : ");
        printf("\n");

        scanf("%d",&choix);

        printf("\n");

        if (choix >= 1 && choix <= 2) {
            utiliserAttaque(perso1, perso2, perso1->att[choix - 1]);
            printf("\n");
        }

        else if (choix == 3 && perso1->type == soutien) {
            soigner(perso1);
            printf("\n");
        }

        else if (choix == 4 && perso1->technique.recharge_restante == 0) {
            utiliserTechnique(perso1, perso2);
            printf("\n");
        }

        else {
            printf("Choix invalide, tour perdu !\n");
            printf("\n");
        }
    }



    if(perso1->type != soutien){
        if (perso1->technique.recharge_restante == 0){
            printf("3 - Technique spéciale : %s (%s)\n", perso1->technique.nom,perso1->technique.description);
        }
        printf("\n");
        printf("Choisis une action : ");
        printf("\n");

        scanf("%d",&choix);

        printf("\n");

        if (choix >= 1 && choix <= 2) {
            utiliserAttaque(perso1, perso2, perso1->att[choix - 1]);
            printf("\n");
        }

        else if (choix == 3 && perso1->technique.recharge_restante == 0) {
            utiliserTechnique(perso1, perso2);
            printf("\n");
        }

        else {
            printf("Choix invalide, tour perdu !\n");
            printf("\n");
        }

    }


    // Gestion des effets et recharges




    if (perso1->tours_effet_restant == 0) {
        // Rétablir la vitesse après la fin de l'effet
        if (perso1->vitess != perso1->vitessmax){
            perso1->vitess = perso1->vitessmax;
            printf("L'effet de vitesse sur %s est terminé, vitesse rétablie.\n", perso1->nom);

        }
        if (perso1->def != perso1->defmax){
            perso1->def = perso1->defmax;
            printf("L'effet de defense sur %s est terminé, defense rétablie.\n", perso1->nom);

        }

    }




    if (perso2->tours_effet_restant > 0){
        perso2->tours_effet_restant--;
    }
    if (perso1->technique.recharge_restante > 0){
        perso1->technique.recharge_restante--;

    }


}

Champion* selectionnerCible(Champion* c1, Champion* c2, Champion* c3,Champion* attaquant) {
    int choix;

    Champion* options[3] = {c1, c2, c3};

    cible();

    printf("\nQui voulez-vous cibler ?\n");
    for (int i = 0; i < 3; i++) {
        printf("%d - %s (%d PV)\n", i + 1, options[i]->nom, options[i]->pvc);
    }

    scanf("%d",&choix);

    if (choix < 1 || choix > 3 || options[choix - 1]->pvc==0) {
        printf("Choix invalide ! Tour perdu.\n");
        return NULL;
    }
    printf("\n%s attaque %s !\n", attaquant->nom, options[choix - 1]->nom);
    printf("\n");
    combat(attaquant, options[choix - 1]);
    if(options[choix - 1]->pvc==0){
        printf("%s est ko!\n",options[choix - 1]->nom);
    }

    return options[choix - 1];
}

void utiliserAttaque(Champion *attaquant, Champion *cible, Attaque a) {
    if (!esquive(cible->agl)) {
        printf("\n%s esquive avec grâce !\n", cible->nom);
    } else {
        printf("%s utilise %s et inflige %d dégâts à %s !\n", attaquant->nom, a.nom, a.degats, cible->nom);
        cible->pvc -= (a.degats - cible->def);
        if (cible->pvc < 0){
            cible->pvc = 0;
        }
    }
}









void utiliserTechnique(Champion *utilisateur, Champion *cible) {
    Technique *tech = &utilisateur->technique;


    printf("%s utilise sa technique spéciale : %s !\n", utilisateur->nom, tech->nom);


    if (strcmp(tech->propriete, "pvc") == 0 && tech->tours_actifs == 0) {
        if (strcmp(tech->operation, "add") == 0) {
            utilisateur->pvc += tech->valeur;
            if (utilisateur->pvc>utilisateur->pvm) {
                utilisateur->pvc = utilisateur->pvm;
            }
            printf("%s récupère %.0f PV !\n", utilisateur->nom, tech->valeur);
        }
        else if (strcmp(tech->operation, "sub") == 0) {
            cible->pvc =cible->pvc-tech->valeur;

            if (cible->pvc < 0){
                cible->pvc = 0;
            }
            printf("%s fais une grosse attaque et tape %s de  %.0f dégats !\n",utilisateur->nom, cible->nom, tech->valeur);

        }

        else if (strcmp(tech->operation, "div") == 0) {
            cible->pvc =cible->pvc/tech->valeur;

            if (cible->pvc < 0){
                cible->pvc = 0;
            }
            printf("%s fais une grosse attaque et tape %s de  %.0f dégats !\n",utilisateur->nom, cible->nom, (cible->pvc*tech->valeur)-cible->pvc);

        }
        else if (strcmp(tech->operation, "mul") == 0) {
            utilisateur->pvc = utilisateur->pvc* tech->valeur;
            if (utilisateur->pvc>utilisateur->pvm) {
                utilisateur->pvc = utilisateur->pvm;
            }

            printf("%s récupère %.0f PV !\n", utilisateur->nom, utilisateur->pvc-(utilisateur->pvc/tech->valeur));
        }

    }

    if (strcmp(tech->propriete, "vitess") == 0 && tech->tours_actifs > 0) {
        if (strcmp(tech->operation, "div") == 0) {
            cible->vitess = cible->vitess/tech->valeur;

            if (cible->vitess < 0){
                cible->vitess = 0;
            }
            cible->tours_effet_restant = tech->tours_actifs;
            printf("%s perd %.0f%% de vitesse pour %d tours !\n", cible->nom, (tech->valeur-1)*100, tech->tours_actifs);
        }


        else if (strcmp(tech->operation, "mul") == 0) {
            utilisateur->vitess = tech->valeur* utilisateur->vitess;
            if (utilisateur->vitess>=80){
                utilisateur->vitess= 80;
            }


            utilisateur->tours_effet_restant = tech->tours_actifs;

            printf("%s gagne %.0f%% de vitesse pour %d tours !\n", utilisateur->nom, (tech->valeur-1)*100, tech->tours_actifs);
        }

        else if (strcmp(tech->operation, "sub") == 0) {
            cible->vitess = cible->vitess-tech->valeur;

            if (cible->vitess < 0){
                cible->vitess = 0;
            }
            cible->tours_effet_restant = tech->tours_actifs;
            printf("%s perd %0f de vitesse pendant %d tours!\n",cible->nom, tech->valeur, tech->tours_actifs);
        }


        else if (strcmp(tech->operation, "add") == 0) {
            utilisateur->vitess = utilisateur->vitess+tech->valeur;
            if (utilisateur->vitess>=80){
                utilisateur->vitess= 80;
            }


            utilisateur->tours_effet_restant = tech->tours_actifs;
            printf("%s gagne %0f de vitesse pendant %d tours!\n",utilisateur->nom, tech->valeur, tech->tours_actifs);
        }
    }

    if (strcmp(tech->propriete, "def") == 0 && tech->tours_actifs > 0) {
        if (strcmp(tech->operation, "div") == 0) {
            cible->def = cible->def/tech->valeur;

            if (cible->def < 0) {
                cible->def = 0;
            }
            cible->tours_effet_restant = tech->tours_actifs;
            printf("%s perd %.0f de defense pour %d tours !\n", cible->nom, (tech->valeur-1)*100, tech->tours_actifs);
        }


        else if (strcmp(tech->operation, "mul") == 0) {
            utilisateur->def = tech->valeur* utilisateur->def;
            if (utilisateur->def>=80){
                utilisateur->def= 80;
            }



            utilisateur->tours_effet_restant = tech->tours_actifs;
            printf("%s gagne %.0f%% de defense pour %d tours !\n", utilisateur->nom, (tech->valeur-1)*100, tech->tours_actifs);
        }


        else if (strcmp(tech->operation, "sub") == 0) {
            cible->def = cible->def-tech->valeur;

            if (cible->def < 0) {
                cible->def = 0;
            }
            cible->tours_effet_restant = tech->tours_actifs;
            printf("%s perd %.0f de defense pour %d tours !\n", cible->nom, tech->valeur, tech->tours_actifs);
        }


        else if (strcmp(tech->operation, "add") == 0) {
            utilisateur->def = utilisateur->def+tech->valeur;

            if (utilisateur->def > 80) {
                cible->def = 80;
            }

            utilisateur->tours_effet_restant = tech->tours_actifs;
            printf("%s gagne %.0f de defense pour %d tours !\n", cible->nom, tech->valeur, tech->tours_actifs);
        }

    }



    tech->recharge_restante = tech->recharge_max;

}



int esquive(int chance) {
    return (rand() % 101) > chance;
}





void soigner(Champion* c) {
    int soin = 30;
    c->pvc += soin;
    if (c->pvc > c->pvm) c->pvc = c->pvm;
    printf("%s se soigne et récupère %d PV !\n", c->nom, soin);
}
